%% File : ModeleDemonstrateurMoteur.tlc
<<<<<<< HEAD
%% Created: Wed Jan 17 17:29:34 2018
=======
%% Created: Thu Jan 18 14:22:48 2018
>>>>>>> Conception-de-commande/ProgrammeMicro
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "ModeleDemonstrateurMoteur.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  ModeleDemonstrateurMoteur "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
  %openfile externs
    
  extern void ModeleDemonstrateurMoteur_Outputs_wrapper(const real_T *Vm,
                          real_T *Vs,
                          real_T *Vg ,
			   const real_T *xC,
                          const real_T  *R, const int_T  p_width0, 
                          const real_T  *L, const int_T  p_width1, 
                          const real_T  *Ke, const int_T  p_width2, 
                          const real_T  *Kc, const int_T  p_width3, 
                          const real_T  *mu, const int_T  p_width4, 
                          const real_T  *J, const int_T  p_width5, 
                          const real_T  *Cn, const int_T  p_width6, 
                          const real_T  *rCn, const int_T  p_width7, 
                          const real_T  *Delta1, const int_T  p_width8, 
                          const real_T  *Ks, const int_T  p_width9, 
                          const real_T  *Kr, const int_T  p_width10, 
                          const real_T  *Kg, const int_T  p_width11, 
                          const real_T  *Znmrt, const int_T  p_width12, 
                          const real_T  *Rchn, const int_T  p_width13, 
                          const real_T  *rRch, const int_T  p_width14, 
                          const real_T  *Delta2, const int_T p_width15);
  extern void ModeleDemonstrateurMoteur_Derivatives_wrapper(const real_T *Vm,
                          const real_T *Vs,
                          const real_T *Vg,
                          real_T *dx ,
                          real_T *xC, 
                          const real_T  *R,  const int_T  p_width0,
                          const real_T  *L,  const int_T  p_width1,
                          const real_T  *Ke,  const int_T  p_width2,
                          const real_T  *Kc,  const int_T  p_width3,
                          const real_T  *mu,  const int_T  p_width4,
                          const real_T  *J,  const int_T  p_width5,
                          const real_T  *Cn,  const int_T  p_width6,
                          const real_T  *rCn,  const int_T  p_width7,
                          const real_T  *Delta1,  const int_T  p_width8,
                          const real_T  *Ks,  const int_T  p_width9,
                          const real_T  *Kr,  const int_T  p_width10,
                          const real_T  *Kg,  const int_T  p_width11,
                          const real_T  *Znmrt,  const int_T  p_width12,
                          const real_T  *Rchn,  const int_T  p_width13,
                          const real_T  *rRch,  const int_T  p_width14,
                           const real_T *Delta2, const int_T  p_width15);
  %closefile externs
  %<LibCacheExtern(externs)>
  %%
%endfunction

%% InitializeConditions =========================================================
 %%
 %function InitializeConditions(block, system) Output
  /* %<Type> Block: %<Name> */
  
  { 
   real_T *xC   = &%<LibBlockContinuousState("", "", 0)>;
   
   
    xC[0] =  0;
    xC[1] =  0;
    xC[2] =  0;
    xC[3] =  0;
  }
 %endfunction
%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
     %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
   %else
     %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
   %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
     %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
   %else
     %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
   %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
     %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
   %else
     %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
   %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1
     %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
   %else
     %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
   %endif
  %assign nelements5 = LibBlockParameterSize(P5)
  %assign param_width5 = nelements5[0] * nelements5[1]
  %if (param_width5) > 1
     %assign pp5 = LibBlockMatrixParameterBaseAddr(P5)
   %else
     %assign pp5 = LibBlockParameterAddr(P5, "", "", 0)
   %endif
  %assign nelements6 = LibBlockParameterSize(P6)
  %assign param_width6 = nelements6[0] * nelements6[1]
  %if (param_width6) > 1
     %assign pp6 = LibBlockMatrixParameterBaseAddr(P6)
   %else
     %assign pp6 = LibBlockParameterAddr(P6, "", "", 0)
   %endif
  %assign nelements7 = LibBlockParameterSize(P7)
  %assign param_width7 = nelements7[0] * nelements7[1]
  %if (param_width7) > 1
     %assign pp7 = LibBlockMatrixParameterBaseAddr(P7)
   %else
     %assign pp7 = LibBlockParameterAddr(P7, "", "", 0)
   %endif
  %assign nelements8 = LibBlockParameterSize(P8)
  %assign param_width8 = nelements8[0] * nelements8[1]
  %if (param_width8) > 1
     %assign pp8 = LibBlockMatrixParameterBaseAddr(P8)
   %else
     %assign pp8 = LibBlockParameterAddr(P8, "", "", 0)
   %endif
  %assign nelements9 = LibBlockParameterSize(P9)
  %assign param_width9 = nelements9[0] * nelements9[1]
  %if (param_width9) > 1
     %assign pp9 = LibBlockMatrixParameterBaseAddr(P9)
   %else
     %assign pp9 = LibBlockParameterAddr(P9, "", "", 0)
   %endif
  %assign nelements10 = LibBlockParameterSize(P10)
  %assign param_width10 = nelements10[0] * nelements10[1]
  %if (param_width10) > 1
     %assign pp10 = LibBlockMatrixParameterBaseAddr(P10)
   %else
     %assign pp10 = LibBlockParameterAddr(P10, "", "", 0)
   %endif
  %assign nelements11 = LibBlockParameterSize(P11)
  %assign param_width11 = nelements11[0] * nelements11[1]
  %if (param_width11) > 1
     %assign pp11 = LibBlockMatrixParameterBaseAddr(P11)
   %else
     %assign pp11 = LibBlockParameterAddr(P11, "", "", 0)
   %endif
  %assign nelements12 = LibBlockParameterSize(P12)
  %assign param_width12 = nelements12[0] * nelements12[1]
  %if (param_width12) > 1
     %assign pp12 = LibBlockMatrixParameterBaseAddr(P12)
   %else
     %assign pp12 = LibBlockParameterAddr(P12, "", "", 0)
   %endif
  %assign nelements13 = LibBlockParameterSize(P13)
  %assign param_width13 = nelements13[0] * nelements13[1]
  %if (param_width13) > 1
     %assign pp13 = LibBlockMatrixParameterBaseAddr(P13)
   %else
     %assign pp13 = LibBlockParameterAddr(P13, "", "", 0)
   %endif
  %assign nelements14 = LibBlockParameterSize(P14)
  %assign param_width14 = nelements14[0] * nelements14[1]
  %if (param_width14) > 1
     %assign pp14 = LibBlockMatrixParameterBaseAddr(P14)
   %else
     %assign pp14 = LibBlockParameterAddr(P14, "", "", 0)
   %endif
  %assign nelements15 = LibBlockParameterSize(P15)
  %assign param_width15 = nelements15[0] * nelements15[1]
  %if (param_width15) > 1
     %assign pp15 = LibBlockMatrixParameterBaseAddr(P15)
   %else
     %assign pp15 = LibBlockParameterAddr(P15, "", "", 0)
   %endif
  %assign nelements16 = LibBlockParameterSize(P16)
  %assign param_width16 = nelements16[0] * nelements16[1]
  %if (param_width16) > 1
     %assign pp16 = LibBlockMatrixParameterBaseAddr(P16)
   %else
     %assign pp16 = LibBlockParameterAddr(P16, "", "", 0)
   %endif
  %assign py_width = LibBlockOutputSignalWidth(0)
  %assign pu_width = LibBlockInputSignalWidth(0)
 { 
    real_T *pxc = &%<LibBlockContinuousState("", "", 0)>;
    ModeleDemonstrateurMoteur_Outputs_wrapper(%<pu0>, %<py0>, %<py1>, pxc,  %<pp1>, %<param_width1>,  %<pp2>, %<param_width2>,  %<pp3>, %<param_width3>,  %<pp4>, %<param_width4>,  %<pp5>, %<param_width5>,  %<pp6>, %<param_width6>,  %<pp7>, %<param_width7>,  %<pp8>, %<param_width8>,  %<pp9>, %<param_width9>,  %<pp10>, %<param_width10>,  %<pp11>, %<param_width11>,  %<pp12>, %<param_width12>,  %<pp13>, %<param_width13>,  %<pp14>, %<param_width14>,  %<pp15>, %<param_width15>, %<pp16>, %<param_width16>);

  }  %%
%endfunction


%% Function: Derivatives ======================================================
%% Abstract:
%%      Derivatives
%%
%function Derivatives(block, system) Output
   /* S-Function "ModeleDemonstrateurMoteur_wrapper" Block: %<Name> */  

  
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1    
   %assign pp1 = LibBlockMatrixParameterBaseAddr(P1) 
  %else    
   %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1    
   %assign pp2 = LibBlockMatrixParameterBaseAddr(P2) 
  %else    
   %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1    
   %assign pp3 = LibBlockMatrixParameterBaseAddr(P3) 
  %else    
   %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
  %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1    
   %assign pp4 = LibBlockMatrixParameterBaseAddr(P4) 
  %else    
   %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
  %endif
  %assign nelements5 = LibBlockParameterSize(P5)
  %assign param_width5 = nelements5[0] * nelements5[1]
  %if (param_width5) > 1    
   %assign pp5 = LibBlockMatrixParameterBaseAddr(P5) 
  %else    
   %assign pp5 = LibBlockParameterAddr(P5, "", "", 0)
  %endif
  %assign nelements6 = LibBlockParameterSize(P6)
  %assign param_width6 = nelements6[0] * nelements6[1]
  %if (param_width6) > 1    
   %assign pp6 = LibBlockMatrixParameterBaseAddr(P6) 
  %else    
   %assign pp6 = LibBlockParameterAddr(P6, "", "", 0)
  %endif
  %assign nelements7 = LibBlockParameterSize(P7)
  %assign param_width7 = nelements7[0] * nelements7[1]
  %if (param_width7) > 1    
   %assign pp7 = LibBlockMatrixParameterBaseAddr(P7) 
  %else    
   %assign pp7 = LibBlockParameterAddr(P7, "", "", 0)
  %endif
  %assign nelements8 = LibBlockParameterSize(P8)
  %assign param_width8 = nelements8[0] * nelements8[1]
  %if (param_width8) > 1    
   %assign pp8 = LibBlockMatrixParameterBaseAddr(P8) 
  %else    
   %assign pp8 = LibBlockParameterAddr(P8, "", "", 0)
  %endif
  %assign nelements9 = LibBlockParameterSize(P9)
  %assign param_width9 = nelements9[0] * nelements9[1]
  %if (param_width9) > 1    
   %assign pp9 = LibBlockMatrixParameterBaseAddr(P9) 
  %else    
   %assign pp9 = LibBlockParameterAddr(P9, "", "", 0)
  %endif
  %assign nelements10 = LibBlockParameterSize(P10)
  %assign param_width10 = nelements10[0] * nelements10[1]
  %if (param_width10) > 1    
   %assign pp10 = LibBlockMatrixParameterBaseAddr(P10) 
  %else    
   %assign pp10 = LibBlockParameterAddr(P10, "", "", 0)
  %endif
  %assign nelements11 = LibBlockParameterSize(P11)
  %assign param_width11 = nelements11[0] * nelements11[1]
  %if (param_width11) > 1    
   %assign pp11 = LibBlockMatrixParameterBaseAddr(P11) 
  %else    
   %assign pp11 = LibBlockParameterAddr(P11, "", "", 0)
  %endif
  %assign nelements12 = LibBlockParameterSize(P12)
  %assign param_width12 = nelements12[0] * nelements12[1]
  %if (param_width12) > 1    
   %assign pp12 = LibBlockMatrixParameterBaseAddr(P12) 
  %else    
   %assign pp12 = LibBlockParameterAddr(P12, "", "", 0)
  %endif
  %assign nelements13 = LibBlockParameterSize(P13)
  %assign param_width13 = nelements13[0] * nelements13[1]
  %if (param_width13) > 1    
   %assign pp13 = LibBlockMatrixParameterBaseAddr(P13) 
  %else    
   %assign pp13 = LibBlockParameterAddr(P13, "", "", 0)
  %endif
  %assign nelements14 = LibBlockParameterSize(P14)
  %assign param_width14 = nelements14[0] * nelements14[1]
  %if (param_width14) > 1    
   %assign pp14 = LibBlockMatrixParameterBaseAddr(P14) 
  %else    
   %assign pp14 = LibBlockParameterAddr(P14, "", "", 0)
  %endif
  %assign nelements15 = LibBlockParameterSize(P15)
  %assign param_width15 = nelements15[0] * nelements15[1]
  %if (param_width15) > 1    
   %assign pp15 = LibBlockMatrixParameterBaseAddr(P15) 
  %else    
   %assign pp15 = LibBlockParameterAddr(P15, "", "", 0)
  %endif
  %assign nelements16 = LibBlockParameterSize(P16)
  %assign param_width16 = nelements16[0] * nelements16[1]
  %if (param_width16) > 1    
   %assign pp16 = LibBlockMatrixParameterBaseAddr(P16) 
  %else    
   %assign pp16 = LibBlockParameterAddr(P16, "", "", 0)
  %endif
  
 
  
 { 
   real_T *pxc = &%<LibBlockContinuousState("", "", 0)>;
   real_T *dx  =  &%<LibBlockContinuousStateDerivative("","",0)>;
   ModeleDemonstrateurMoteur_Derivatives_wrapper(%<pu0>, %<py0>, %<py1>, dx, pxc, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>, %<pp5>, %<param_width5>, %<pp6>, %<param_width6>, %<pp7>, %<param_width7>, %<pp8>, %<param_width8>, %<pp9>, %<param_width9>, %<pp10>, %<param_width10>, %<pp11>, %<param_width11>, %<pp12>, %<param_width12>, %<pp13>, %<param_width13>, %<pp14>, %<param_width14>, %<pp15>, %<param_width15>, %<pp16>, %<param_width16>);
  }
  %%
%endfunction 
%% [EOF] ModeleDemonstrateurMoteur.tlc





